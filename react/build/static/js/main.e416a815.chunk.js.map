{"version":3,"sources":["types/EPageStatus.ts","components/Footer.tsx","context/AppContext.ts","components/Header.tsx","components/Loader.tsx","configuration.ts","services/base-service.ts","containers/todo-categories/TodoCategoryIndex.tsx","components/Alert.tsx","containers/todo-categories/TodoCategoryDetails.tsx","containers/todo-categories/TodoCategoryEdit.tsx","containers/todo-categories/TodoCategoryCreate.tsx","containers/todo-priorities/TodoPriorityIndex.tsx","containers/todo-priorities/TodoPriorityDetails.tsx","containers/todo-priorities/TodoPriorityEdit.tsx","containers/todo-priorities/TodoPriorityCreate.tsx","containers/todo-tasks/TodoTaskIndex.tsx","containers/todo-tasks/TodoTaskDetails.tsx","containers/todo-tasks/TodoTaskEdit.tsx","containers/todo-tasks/TodoTaskCreate.tsx","containers/home/HomeIndex.tsx","services/identity-service.ts","containers/identity/Login.tsx","containers/identity/Register.tsx","containers/Page404.tsx","containers/PageForm.tsx","App.tsx","index.tsx"],"names":["EPageStatus","Footer","className","initialAppState","jwt","firstName","lastName","setAuthInfo","AppContext","React","createContext","AppContextProvider","Provider","Header","Consumer","appState","useContext","to","onClick","Loader","props","pageStatus","Loading","role","Error","statusCode","ApiBaseUrl","BaseService","headers","Authorization","apiEndpoint","this","axios","get","getAxiosConfiguration","response","ok","status","data","error","messages","id","url","entity","put","post","delete","Axios","create","baseURL","EAlertClass","RowDisplay","todoCategory","categoryName","categorySort","TodoCategoryIndex","useState","todoCategories","setTodoCategories","setPageStatus","loadData","a","getAll","result","OK","useEffect","map","TodoCategoryDetails","useParams","setTodoCategory","TodoCategoryEdit","history","useHistory","console","log","objToSave","push","value","onChange","event","target","type","parseInt","TodoCategoryCreate","todoPriority","priorityName","prioritySort","TodoPriorityIndex","todoPriorities","setTodoPriorities","TodoPriorityDetails","setTodoPriority","TodoPriorityEdit","TodoPriorityCreate","todoTask","taskName","taskSort","TodoTaskIndex","todoTasks","setTodoTasks","TodoTaskDetails","setTodoTask","categoryId","todoCategoryId","priorityId","todoPriorityId","categoryResult","priorityResult","isCompleted","TodoTaskEdit","Number","defaultChecked","Boolean","TodoTaskCreate","defaultValue","HomeIndex","Alert","show","alertClass","message","IdentityService","loginData","loginDataJson","JSON","stringify","registerData","Login","email","password","setLoginData","alertMessage","setAlertMessage","logInClicked","e","preventDefault","token","onSubmit","nativeEvent","Danger","htmlFor","name","placeholder","autoComplete","Register","setRegisterData","registerClicked","Page404","FormView","values","input","handleChange","checked","checkbox","radio","textarea","rows","select","initialFormValues","PageForm","formValues","setFormValues","App","setAppState","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e416a815.chunk.js","sourcesContent":["export enum EPageStatus {\n    Loading = \"Loading...\",\n    Error = \"Error...\",\n    OK = \"Ok\",\n}\n","const Footer = () => {\n    return (\n        <footer className=\"border-top footer text-muted\">\n            <div className=\"container\">\n                &copy; 2021 - React Demo\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from \"react\";\n\nexport interface IAppState {\n    jwt: string | null;\n    firstName: string;\n    lastName: string;\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string) => void;\n}\n\nexport const initialAppState : IAppState = {\n    jwt: null,\n    firstName: '',\n    lastName: '',\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string): void => {}\n}\n\nexport const AppContext = React.createContext<IAppState>(initialAppState);\nexport const AppContextProvider = AppContext.Provider;\nexport const AppContextConsumer = AppContext.Consumer;\n","import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { AppContext } from \"../context/AppContext\";\n\nconst Header = () => {\n    const appState = useContext(AppContext);\n\n    return (\n        <header>\n            <nav className=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\">\n                <div className=\"container\">\n                    <NavLink className=\"navbar-brand\" to=\"/\">Todo Client</NavLink>\n                    <div className=\"navbar-collapse collapse d-sm-inline-flex justify-content-between\">\n                        <ul className=\"navbar-nav flex-grow-1\">\n                            <li className=\"nav-item\">\n                                <NavLink className=\"nav-link text-dark\" to=\"/TodoCategories\">TodoCategories</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink className=\"nav-link text-dark\" to=\"/TodoPriorities\">TodoPriorities</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink className=\"nav-link text-dark\" to=\"/TodoTasks\">TodoTasks</NavLink>\n                            </li>\n                        </ul>\n                        <ul className=\"navbar-nav\">\n                            {appState.jwt === null ?\n                            <>\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"nav-link text-dark\" to=\"/identity/login\">Login</NavLink>\n                                </li>\n                                <li className=\"nav-item\">\n                                <NavLink className=\"nav-link text-dark\" to=\"/identity/register\">Register</NavLink>\n                                </li>\n                                </>\n\n                                :\n                                <>\n                                    <li className=\"nav-item\">\n                                        <span className=\"nav-link text-dark\">{appState.firstName + ' ' + appState.lastName}</span>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <button onClick={() => appState.setAuthInfo(null, '', '')} className=\"btn btn-link nav-link text-dark\" >Logout</button>\n                                    </li>\n                                </>\n                            }\n\n                        </ul>\n\n                    </div>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","import { EPageStatus } from \"../types/EPageStatus\";\n\nconst Loader = (props: {pageStatus:EPageStatus, statusCode:  number}) => {\n    if (props.pageStatus === EPageStatus.Loading){\n        return <div className=\"alert alert-primary\" role=\"alert\">Loading...</div>;\n    }\n    if (props.pageStatus === EPageStatus.Error) {\n        return <div className=\"alert alert-danger\" role=\"alert\">Error... {props.statusCode}</div>\n    }\n    return <></>;\n}\n\nexport default Loader;","export const ApiBaseUrl = \"https://taltech.akaver.com/api/v1\";\n","import Axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\n\nexport abstract class BaseService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\n        if (!jwt) return undefined;\n        const config: AxiosRequestConfig = {\n            headers: {\n                Authorization: 'Bearer ' + jwt\n            }\n        };\n        return config;\n    }\n\n    static async getAll<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> {\n        try {\n            let response = await this.axios.get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n    }\n\n    static async get<TEntity>(apiEndpoint: string, id: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        const url = apiEndpoint + \"/\" + id\n        try {\n            let response = await this.axios.get<TEntity>(url, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n    }\n\n    static async put<TEntity>(entity: TEntity, apiEndpoint: string, id: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        const url = apiEndpoint + \"/\" + id\n        try {\n            let response = await this.axios.put<TEntity>(url, entity, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n    }\n\n    static async post<TEntity>(entity: TEntity, apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        try {\n            let response = await this.axios.post<TEntity>(apiEndpoint, entity, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n    }\n\n    static async delete<TEntity>(apiEndpoint: string, id: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        const url = apiEndpoint + \"/\" + id\n        try {\n            let response = await this.axios.delete<TEntity>(url, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n    }\n\n}","import { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { AppContext } from \"../../context/AppContext\";\n\nconst RowDisplay = (props: { todoCategory: ITodoCategory }) => (\n    <tr>\n        <td>\n            {props.todoCategory.categoryName}\n        </td>\n        <td>\n            {props.todoCategory.categorySort}\n        </td>\n        <td>\n            <Link to={'/todocategories/' + props.todoCategory.id}>Details</Link>\n        </td>\n        <td>\n            <Link to={'/todocategories/edit/' + props.todoCategory.id}>Edit</Link>\n        </td>\n    </tr>\n);\n\nconst TodoCategoryIndex = () => {\n    const appState = useContext(AppContext);\n\n    const [todoCategories, setTodoCategories] = useState([] as ITodoCategory[]);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.getAll<ITodoCategory>('/todocategories', appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoCategories(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>TodoCategories</h1>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Category Name\n                        </th>\n                        <th>\n                            Category Sort\n                        </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {todoCategories.map(todoCategory =>\n                        <RowDisplay todoCategory={todoCategory} key={todoCategory.id} />)\n                    }\n                </tbody>\n            </table>\n            \n            <div>\n                {appState.jwt !== null && appState.jwt !== \"\" ? <Link to={'TodoCategories/Create'}>Add new category</Link> : \"\" }\n            </div>\n            <Loader {...pageStatus} />\n        </>\n    );\n}\n\nexport default TodoCategoryIndex;","export enum EAlertClass {\n    Primary = 'alert-primary',\n    Secondary = 'alert-secondary',\n    Success = 'alert-success',\n    Danger = 'alert-danger',\n    Warning = 'alert-warning',\n    Info = 'alert-info',\n    Light = 'alert-light',\n    Dark = 'alert-dark',\n}\n\nconst Alert = (props: {show: boolean, message: string, alertClass: EAlertClass }) => {\n    \n    return props.show ? <div className={'alert ' + props.alertClass} role=\"alert\">{props.message}</div> : null;\n}\n\nexport default Alert;","import { useParams } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { IRouteId } from \"../../types/IRouteId\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport Loader from \"../../components/Loader\";\n\nconst TodoCategoryDetails = () => {\n    // get the router params from hook\n    const { id } = useParams() as IRouteId;\n\n    const appState = useContext(AppContext);\n\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.get<ITodoCategory>('/todocategories', id, appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoCategory(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n\n    return (\n        <>\n            <h2>TodoCategoryDetails Id: {id}</h2>\n            \n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Category Name\n                    </th>\n                        <th>\n                            Category Sort\n                    </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th>\n                            {todoCategory.categoryName}\n                        </th>\n                        <th>\n                            {todoCategory.categorySort}\n                        </th>\n                    </tr>\n                </tbody>\n            </table>\n            <Loader {...pageStatus} />\n        </>\n\n    );\n}\n\nexport default TodoCategoryDetails;","import { useHistory, useParams } from \"react-router-dom\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { IRouteId } from \"../../types/IRouteId\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport Loader from \"../../components/Loader\";\n\nconst TodoCategoryEdit = () => {\n    // get the router params from hook\n    const id = useParams() as IRouteId;\n    const history = useHistory();\n\n    const appState = useContext(AppContext);\n\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.get<ITodoCategory>('/todocategories', id.id, appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoCategory(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    async function SaveData() {\n        console.log(\"save\");\n\n        let objToSave: ITodoCategory =\n        {\n            id: id.id,\n            categoryName: todoCategory.categoryName,\n            categorySort: todoCategory.categorySort\n        };\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.put<ITodoCategory>(objToSave, '/todocategories', id.id, appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todocategories')\n            }\n        }\n    }\n\n    async function DeleteCategory() {\n        console.log(\"delete\");\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.delete<ITodoCategory>('/todocategories', id.id, appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todocategories')\n            }\n        }\n    }\n\n    function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoCategory({\n            categoryName: event.target.value,\n            categorySort: todoCategory.categorySort\n        })\n    }\n\n    function handleSortChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoCategory({\n            categoryName: todoCategory.categoryName,\n            categorySort: parseInt(event.target.value)\n        })\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>TodoCategoryEdit Id:</h1> {id.id}\n\n            <div>\n                <div>\n                    <div>\n                        <label>Change category name:</label>\n                        <input value={todoCategory.categoryName} onChange={handleNameChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Change category sort:</label>\n                        <input value={todoCategory.categorySort} onChange={handleSortChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Save\" onClick={SaveData} />\n                    </div>\n\n                    <div>\n                        <input type=\"submit\" value=\"Delete\" onClick={DeleteCategory} />\n                    </div>\n                </div>\n            </div>\n\n            <Loader {...pageStatus} />\n        </>\n\n    );\n}\n\nexport default TodoCategoryEdit;\n\n","import { useContext, useState } from \"react\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { useHistory } from \"react-router-dom\";\n\nconst TodoCategoryCreate = () => {\n    const appState = useContext(AppContext);\n    const history = useHistory();\n\n    const [todoCategory, setTodoCategory] = useState({categoryName: \"\",\n    categorySort: 0} as ITodoCategory);\n\n    async function SaveData() {\n        console.log(\"save\");\n\n        let objToSave: ITodoCategory =\n        {\n            categoryName: todoCategory.categoryName,\n            categorySort: todoCategory.categorySort\n        };\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.post<ITodoCategory>(objToSave, '/todocategories', appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todocategories')\n            }\n        }\n    }\n\n    function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoCategory({\n            categoryName: event.target.value,\n            categorySort: todoCategory.categorySort\n        })\n    }\n\n    function handleSortChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoCategory({\n            categoryName: todoCategory.categoryName,\n            categorySort: parseInt(event.target.value)\n        })\n    }\n\n    return (\n        <>\n            <h1>TodoCategoryCreate</h1>\n\n            <div>\n                <div>\n                    <div>\n                        <label>Category name:</label>\n                        <input value={todoCategory.categoryName} onChange={handleNameChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Category sort:</label>\n                        <input value={todoCategory.categorySort} onChange={handleSortChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Save\" onClick={SaveData} />\n                    </div>\n                </div>\n            </div>\n        </>\n\n    );\n}\n\nexport default TodoCategoryCreate;\n","import { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { AppContext } from \"../../context/AppContext\";\n\nconst RowDisplay = (props: { todoPriority: ITodoPriority }) => (\n    <tr>\n        <td>\n            {props.todoPriority.priorityName}\n        </td>\n        <td>\n            {props.todoPriority.prioritySort}\n        </td>\n        <td>\n            <Link to={'/todopriorities/' + props.todoPriority.id}>Details</Link>\n        </td>\n        <td>\n            <Link to={'/todopriorities/edit/' + props.todoPriority.id}>Edit</Link>\n        </td>\n    </tr>\n);\n\nconst TodoPriorityIndex = () => {\n    const appState = useContext(AppContext);\n\n    const [todoPriorities, setTodoPriorities] = useState([] as ITodoPriority[]);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.getAll<ITodoPriority>('/todopriorities', appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoPriorities(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>TodoPriorities</h1>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Priority Name\n                        </th>\n                        <th>\n                            Priority Sort\n                        </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {todoPriorities.map(todoPriority =>\n                        <RowDisplay todoPriority={todoPriority} key={todoPriority.id} />)\n                    }\n                </tbody>\n            </table>\n        \n            <div>\n                {appState.jwt !== null && appState.jwt !== \"\" ? <Link to={'TodoPriorities/Create'}>Add new Priority</Link> : \"\"}\n            </div>\n            <Loader {...pageStatus} />\n        </>\n    );\n}\n\nexport default TodoPriorityIndex;","import { useParams } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { IRouteId } from \"../../types/IRouteId\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport Loader from \"../../components/Loader\";\n\nconst TodoPriorityDetails = () => {\n    // get the router params from hook\n    const { id } = useParams() as IRouteId;\n\n    const appState = useContext(AppContext);\n\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.get<ITodoPriority>('/todopriorities', id, appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoPriority(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n\n    return (\n        <>\n            <h2>TodoPriorityDetails Id: {id}</h2>\n\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Priority Name\n                    </th>\n                        <th>\n                            Priority Sort\n                    </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th>\n                            {todoPriority.priorityName}\n                        </th>\n                        <th>\n                            {todoPriority.prioritySort}\n                        </th>\n                    </tr>\n                </tbody>\n            </table>\n            <Loader {...pageStatus} />\n        </>\n\n    );\n}\n\nexport default TodoPriorityDetails;","import { useHistory, useParams } from \"react-router-dom\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { IRouteId } from \"../../types/IRouteId\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport Loader from \"../../components/Loader\";\n\nconst TodoPriorityEdit = () => {\n    // get the router params from hook\n    const id = useParams() as IRouteId;\n    const history = useHistory();\n\n    const appState = useContext(AppContext);\n\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.get<ITodoPriority>('/todopriorities', id.id, appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoPriority(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    async function SaveData() {\n        console.log(\"save\");\n\n        let objToSave: ITodoPriority =\n        {\n            id: id.id,\n            priorityName: todoPriority.priorityName,\n            prioritySort: todoPriority.prioritySort\n        };\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.put<ITodoPriority>(objToSave, '/todopriorities', id.id, appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todopriorities')\n            }\n        }\n    }\n\n    async function DeletePriority() {\n        console.log(\"delete\");\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.delete<ITodoPriority>('/todopriorities', id.id, appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todopriorities')\n            }\n        }\n    }\n\n    function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoPriority({\n            priorityName: event.target.value,\n            prioritySort: todoPriority.prioritySort\n        })\n    }\n\n    function handleSortChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoPriority({\n            priorityName: todoPriority.priorityName,\n            prioritySort: parseInt(event.target.value)\n        })\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>TodoPriorityEdit Id:</h1> {id.id}\n\n            <div>\n                <div>\n                    <div>\n                        <label>Change Priority name:</label>\n                        <input value={todoPriority.priorityName} onChange={handleNameChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Change Priority sort:</label>\n                        <input value={todoPriority.prioritySort} onChange={handleSortChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Save\" onClick={SaveData} />\n                    </div>\n\n                    <div>\n                        <input type=\"submit\" value=\"Delete\" onClick={DeletePriority} />\n                    </div>\n                </div>\n            </div>\n\n            <Loader {...pageStatus} />\n        </>\n\n    );\n}\n\nexport default TodoPriorityEdit;\n\n","import { useContext, useState } from \"react\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { useHistory } from \"react-router-dom\";\n\nconst TodoPriorityCreate = () => {\n    const appState = useContext(AppContext);\n    const history = useHistory();\n\n    const [todoPriority, setTodoPriority] = useState({\n        priorityName: \"\",\n        prioritySort: 0\n    } as ITodoPriority);\n\n    async function SaveData() {\n        console.log(\"save\");\n\n        let objToSave: ITodoPriority =\n        {\n            priorityName: todoPriority.priorityName,\n            prioritySort: todoPriority.prioritySort\n        };\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.post<ITodoPriority>(objToSave, '/todopriorities', appState.jwt)\n            console.log(response.statusCode)\n\n            if (response.ok) {\n                history.push('/todopriorities')\n            }\n        }\n    }\n\n    function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoPriority({\n            priorityName: event.target.value,\n            prioritySort: todoPriority.prioritySort\n        })\n    }\n\n    function handleSortChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoPriority({\n            priorityName: todoPriority.priorityName,\n            prioritySort: parseInt(event.target.value)\n        })\n    }\n\n    return (\n        <>\n            <h1>TodoPriorityCreate</h1>\n\n            <div>\n                <div>\n                    <div>\n                        <label>Priority name:</label>\n                        <input value={todoPriority.priorityName} onChange={handleNameChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Priority sort:</label>\n                        <input value={todoPriority.prioritySort} onChange={handleSortChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Save\" onClick={SaveData} />\n                    </div>\n                </div>\n            </div>\n        </>\n\n    );\n}\n\nexport default TodoPriorityCreate;\n","import { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { ITodoTask } from \"../../dto/ITodoTask\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { AppContext } from \"../../context/AppContext\";\n\nconst RowDisplay = (props: { todoTask: ITodoTask }) => (\n    <tr>\n        <td>\n            {props.todoTask.taskName}\n        </td>\n        <td>\n            {props.todoTask.taskSort}\n        </td>\n        <td>\n            <Link to={'/todotasks/' + props.todoTask.id}>Details</Link>\n        </td>\n        <td>\n            <Link to={'/todotasks/edit/' + props.todoTask.id}>Edit</Link>\n        </td>\n    </tr>\n);\n\nconst TodoTaskIndex = () => {\n    const appState = useContext(AppContext);\n\n    const [todoTasks, setTodoTasks] = useState([] as ITodoTask[]);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.getAll<ITodoTask>('/todotasks', appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoTasks(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return(\n        <>\n            <h1>TodoTasks</h1>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Task Name\n                        </th>\n                        <th>\n                            Task Sort\n                        </th>\n                        <th></th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {todoTasks.map(todoTask =>\n                        <RowDisplay todoTask={todoTask} key={todoTask.id} />)\n                    }\n                </tbody>\n            </table>\n        \n            <div>\n                {appState.jwt !== null && appState.jwt !== \"\" ? <Link to={'TodoTasks/Create'}>Add new Task</Link> : \"\"}\n            </div>\n            <Loader {...pageStatus} />\n        </>\n    )\n\n}\n\nexport default TodoTaskIndex;","import { useParams } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { IRouteId } from \"../../types/IRouteId\";\nimport { ITodoTask } from \"../../dto/ITodoTask\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport Loader from \"../../components/Loader\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\n\nconst TodoTaskDetails = () => {\n    // get the router params from hook\n    const { id } = useParams() as IRouteId;\n\n    const appState = useContext(AppContext);\n\n    const [todoTask, setTodoTask] = useState({} as ITodoTask);\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.get<ITodoTask>('/todotasks', id, appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoTask(result.data);\n                let categoryId: string = result.data.todoCategoryId;\n                let priorityId: string = result.data.todoPriorityId;\n\n                let categoryResult = await BaseService.get<ITodoCategory>('/todocategories', categoryId, appState.jwt);\n\n                if (categoryResult.ok && categoryResult.data) {\n                    setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                    setTodoCategory(categoryResult.data);\n                } else {\n                    setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n                }\n\n                let priorityResult = await BaseService.get<ITodoPriority>('/todopriorities', priorityId, appState.jwt);\n\n                if (priorityResult.ok && priorityResult.data) {\n                    setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                    setTodoPriority(priorityResult.data);\n                } else {\n                    setPageStatus({ pageStatus: EPageStatus.Error, statusCode: priorityResult.statusCode });\n                }\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n\n    return (\n        <>\n            <h2>TodoTaskDetails Id: {id}</h2>\n\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Task Name\n                    </th>\n                        <th>\n                            Task Sort\n                    </th>\n                        <th>\n                            Task Category\n                    </th>\n                        <th>\n                            Task Priority\n                    </th>\n                        <th>\n                            Task Completed\n                    </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th>\n                            {todoTask.taskName}\n                        </th>\n                        <th>\n                            {todoTask.taskSort}\n                        </th>\n                        <th>\n                            {todoCategory.categoryName}\n                        </th>\n                        <th>\n                            {todoPriority.priorityName}\n                        </th>\n                        <th>\n                            {\"\" + todoTask.isCompleted}\n                        </th>\n                    </tr>\n                </tbody>\n            </table>\n\n            <Loader {...pageStatus} />\n        </>\n    );\n}\n\nexport default TodoTaskDetails;","import { useHistory, useParams } from \"react-router-dom\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { IRouteId } from \"../../types/IRouteId\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\nimport { ITodoTask } from \"../../dto/ITodoTask\";\n\nconst TodoTaskEdit = () => {\n    // get the router params from hook\n    const id = useParams() as IRouteId;\n    const appState = useContext(AppContext);\n    const history = useHistory();\n\n    const [todoPriorities, setTodoPriorities] = useState([] as ITodoPriority[]);\n    const [todoCategories, setTodoCategories] = useState([] as ITodoCategory[]);\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n    const [todoTask, setTodoTask] = useState({\n        id: id.id,\n        taskName: \"\",\n        taskSort: 0,\n        todoPriorityId: \"\",\n        todoCategoryId: \"\",\n        isCompleted: false\n    } as ITodoTask);\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.get<ITodoTask>('/todotasks', id.id, appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoTask(result.data);\n            }\n\n            if (appState.jwt !== null) {\n                let result = await BaseService.getAll<ITodoPriority>('/todopriorities', appState.jwt);\n\n                if (result.ok && result.data) {\n                    setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                    setTodoPriorities(result.data);\n                } else {\n                    setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n                }\n            }\n\n            if (appState.jwt !== null) {\n                let result = await BaseService.getAll<ITodoCategory>('/todocategories', appState.jwt);\n\n                if (result.ok && result.data) {\n                    setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                    setTodoCategories(result.data);\n                } else {\n                    setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n                }\n            }\n        }\n    }\n\n    async function SaveData() {\n        console.log(\"save\");\n\n        let objToSave: ITodoTask =\n        {\n            id: id.id,\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        };\n\n        console.log(objToSave)\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.put<ITodoTask>(objToSave, '/todotasks', id.id, appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todotasks')\n            }\n        }\n\n    }\n\n    async function DeleteTask() {\n        console.log(\"delete\");\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.delete<ITodoPriority>('/todoTasks', id.id, appState.jwt)\n            console.log(response.statusCode)\n            if (response.ok) {\n                history.push('/todotasks')\n            }\n        }\n    }\n\n    function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: event.target.value,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handleSortChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: Number(event.target.value),\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handleCategoryChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: event.target.value,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handlePriorityChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: event.target.value,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handleCompletedChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: Boolean(event.target.value)\n        })\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>TodoTaskCreate</h1>\n\n            <div>\n                <div>\n                    <div>\n                        <label>Task name:</label>\n                        <input value={todoTask.taskName} onChange={handleNameChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Task sort:</label>\n                        <input value={todoTask.taskSort} onChange={handleSortChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Task category:</label>\n                        <select\n                            value={todoTask.todoCategoryId}\n                            onChange={handleCategoryChange}\n                        >\n                            {todoCategories.map(({ categoryName, id }) => <option value={id} >{categoryName}</option>)}\n                        </select>\n                    </div>\n                    <div>\n                        <label>Task priority:</label>\n                        <select\n                            value={todoTask.todoPriorityId}\n                            onChange={handlePriorityChange}\n                        >\n                            {todoPriorities.map(({ priorityName, id }) => <option value={id} >{priorityName}</option>)}\n                        </select>\n                    </div>\n                    <div>\n                        <label>Task completed:</label>\n                        <input defaultChecked={todoTask.isCompleted} onChange={handleCompletedChange} type=\"checkbox\" />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Save\" onClick={SaveData} />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Delete\" onClick={DeleteTask} />\n                    </div>\n                </div>\n            </div>\n        </>\n\n    );\n}\n\nexport default TodoTaskEdit;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ITodoTask } from \"../../dto/ITodoTask\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { BaseService } from \"../../services/base-service\";\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { useHistory } from \"react-router-dom\";\n\nconst TodoTaskCreate = () => {\n    const appState = useContext(AppContext);\n    const history = useHistory();\n\n    const [todoPriorities, setTodoPriorities] = useState([] as ITodoPriority[]);\n    const [todoCategories, setTodoCategories] = useState([] as ITodoCategory[]);\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const [todoTask, setTodoTask] = useState({\n        taskName: \"\",\n        taskSort: 0,\n        todoPriorityId: \"\",\n        todoCategoryId: \"\",\n        isCompleted: false\n    } as ITodoTask);\n\n    const loadData = async () => {\n        if (appState.jwt !== null) {\n            let result = await BaseService.getAll<ITodoPriority>('/todopriorities', appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoPriorities(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n\n        if (appState.jwt !== null) {\n            let result = await BaseService.getAll<ITodoCategory>('/todocategories', appState.jwt);\n\n            if (result.ok && result.data) {\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n                setTodoCategories(result.data);\n            } else {\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n            }\n        }\n    }\n\n    async function SaveData() {\n        console.log(\"save\");\n\n        let objToSave: ITodoTask =\n        {\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        };\n\n        console.log(objToSave)\n\n        if (appState.jwt !== null) {\n            let response = await BaseService.post<ITodoTask>(objToSave, '/todoTasks', appState.jwt)\n            console.log(response.statusCode)\n\n            if (response.ok) {\n                history.push('/todotasks')\n            }\n        }\n    }\n\n    function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: event.target.value,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handleSortChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: Number(event.target.value),\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handleCategoryChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: event.target.value,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handlePriorityChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: event.target.value,\n            isCompleted: todoTask.isCompleted\n        })\n    }\n\n    function handleCompletedChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(\"Event:\", event.target.value)\n\n        setTodoTask({\n            taskName: todoTask.taskName,\n            taskSort: todoTask.taskSort,\n            todoCategoryId: todoTask.todoCategoryId,\n            todoPriorityId: todoTask.todoPriorityId,\n            isCompleted: Boolean(event.target.value)\n        })\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>TodoTaskCreate</h1>\n\n            <div>\n                <div>\n                    <div>\n                        <label>Task name:</label>\n                        <input value={todoTask.taskName} onChange={handleNameChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Task sort:</label>\n                        <input value={todoTask.taskSort} onChange={handleSortChange} type=\"text\" />\n                    </div>\n                    <div>\n                        <label>Task category:</label>\n                        <select\n                            defaultValue={todoTask.todoCategoryId}\n                            onChange={handleCategoryChange}\n                        ><option></option>\n                            {todoCategories.map(({ categoryName, id }) => <option value={id} >{categoryName}</option>)}\n                        </select>\n                    </div>\n                    <div>\n                        <label>Task priority:</label>\n                        <select\n                            defaultValue={todoTask.todoPriorityId}\n                            onChange={handlePriorityChange}\n                        > <option></option>\n                            {todoPriorities.map(({ priorityName, id }) => <option value={id} >{priorityName}</option>)}\n                        </select>\n                    </div>\n                    <div>\n                        <label>Task completed:</label>\n                        <input defaultChecked={todoTask.isCompleted} onChange={handleCompletedChange} type=\"checkbox\" />\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"Save\" onClick={SaveData} />\n                    </div>\n                </div>\n            </div>\n        </>\n\n    );\n}\n\nexport default TodoTaskCreate;","const HomeIndex = () => {\n    return (\n        <div>Hi, this is a home page :) </div>\n    );\n}\n\nexport default HomeIndex;","import { ILoginResponse } from './../types/ILoginResponse';\nimport Axios, { AxiosError } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class IdentityService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    static async Login(apiEndpoint: string, loginData: {email: string, password:string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(loginData);\n        try {\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n    static async Register(apiEndpoint: string, registerData: {firstName: string, lastName:string, email: string, password:string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(registerData);\n        try {\n            let response = await this.axios.post(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n}","import React, { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport Alert, { EAlertClass } from \"../../components/Alert\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { IdentityService } from \"../../services/identity-service\";\n\nconst Login = () => {\n    const appState = useContext(AppContext);\n\n    const [loginData, setLoginData] = useState({ email: '', password: '' });\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const logInClicked = async (e: Event) => {\n        e.preventDefault();\n        if (loginData.email === '' || loginData.password === '') {\n            setAlertMessage('Empty email or password!');\n        };\n        setAlertMessage('');\n        let response = await IdentityService.Login('Account/Login', loginData);\n        if (!response.ok) {\n            setAlertMessage(response.messages![0]);\n        } else {\n            console.log(\"Data\", response.data)\n            setAlertMessage('');\n            appState.setAuthInfo(response.data!.token, response.data!.firstName, response.data!.lastName);\n        }\n    }\n\n    return (\n        <>\n            { appState.jwt !== null ? <Redirect to=\"/\" /> : null}\n            <h1>Log in</h1>\n            <form onSubmit={(e) => logInClicked(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <section>\n                            <hr />\n                            <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger} />\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Email</label>\n                                <input value={loginData.email} onChange={e => setLoginData({ ...loginData, email: e.target.value })} className=\"form-control\" type=\"email\" id=\"Input_Email\" name=\"Input.Email\" placeholder=\"user@example.com\"  autoComplete=\"username\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Password\">Password</label>\n                                <input value={loginData.password} onChange={e => setLoginData({ ...loginData, password: e.target.value })} className=\"form-control\" type=\"password\" id=\"Input_Password\" name=\"Input.Password\" placeholder=\"Input your current password...\" autoComplete=\"current-password\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => logInClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Log in</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n}\n\nexport default Login;","import React, { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert, { EAlertClass } from \"../../components/Alert\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { IdentityService } from \"../../services/identity-service\";\n\nconst Register = () => {\n    const appState = useContext(AppContext);\n\n    const [registerData, setRegisterData] = useState({ firstName: '', lastName: '', email: '', password: '' });\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const registerClicked = async (e: Event) => {\n        e.preventDefault();\n        if (registerData.firstName === '', registerData.lastName === '', registerData.email === '' || registerData.password === '') {\n            setAlertMessage('Fill in all fields correctly');\n        };\n        setAlertMessage('');\n        let response = await IdentityService.Register('Account/Register', registerData);\n        if (!response.ok) {\n            setAlertMessage(response.messages![0]);\n        } else {\n            console.log(\"Response\", response.statusCode)\n            setAlertMessage('');\n        }\n    }\n\n    return (\n        <>\n            { appState.jwt !== null ? <Redirect to=\"/\" /> : null}\n            <h1>Register</h1>\n            <form onSubmit={(e) => registerClicked(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <section>\n                            <hr />\n                            <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger} />\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">First name</label>\n                                <input value={registerData.firstName} onChange={e => setRegisterData({ ...registerData, firstName: e.target.value })} className=\"form-control\" type=\"firsName\" id=\"Input_FirstName\" name=\"Input.FirstName\" placeholder=\"John\" autoComplete=\"firstName\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Last name</label>\n                                <input value={registerData.lastName} onChange={e => setRegisterData({ ...registerData, lastName: e.target.value })} className=\"form-control\" type=\"lastName\" id=\"Input_LastName\" name=\"Input.LastName\" placeholder=\"Smith\" autoComplete=\"lastName\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Email</label>\n                                <input value={registerData.email} onChange={e => setRegisterData({ ...registerData, email: e.target.value })} className=\"form-control\" type=\"email\" id=\"Input_Email\" name=\"Input.Email\" placeholder=\"user@example.com\" autoComplete=\"username\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Password\">Password</label>\n                                <input value={registerData.password} onChange={e => setRegisterData({ ...registerData, password: e.target.value })} className=\"form-control\" type=\"password\" id=\"Input_Password\" name=\"Input.Password\" placeholder=\"Input password...\" autoComplete=\"current-password\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => registerClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Register</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n}\n\nexport default Register;","const Page404 = () => {\n    return (\n        <div>Page not found - 404!</div>\n    );\n}\n\nexport default Page404;","import { useState } from \"react\";\n\ninterface IFormValues {\n    input: string;\n    checkbox: boolean;\n    radio: string;\n    textarea: string;\n    select: string;\n}\n\nexport interface IFormProps {\n    values: IFormValues;\n\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\n}\n\nconst FormView = (props: IFormProps) => {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <label htmlFor=\"formInputText\">Text</label>\n                <input value={props.values.input} onChange={(e) => props.handleChange(e.target)} type=\"text\" className=\"form-control\" id=\"formInputText\" />\n            </div>\n            <div className=\"form-group form-check\">\n                <input checked={props.values.checkbox} onChange={(e) => props.handleChange(e.target)} type=\"checkbox\" className=\"form-check-input\" id=\"formInputCheckBox\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputCheckBox\">CheckBox</label>\n            </div>\n\n            <div className=\"form-check\">\n                <input checked={props.values.radio === 'checked1'} onChange={(e) => props.handleChange(e.target)} className=\"form-check-input\" type=\"radio\" id=\"formInputRadio1\" value=\"checked1\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputRadio1\">\n                    Radio 1\n                </label>\n            </div>\n            <div className=\"form-check\">\n                <input checked={props.values.radio === 'checked2'} onChange={(e) => props.handleChange(e.target)} className=\"form-check-input\" type=\"radio\"id=\"formInputRadio2\" value=\"checked2\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputRadio2\">\n                    Radio 2\n                </label>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"formTextArea\">Textarea</label>\n                <textarea value={props.values.textarea} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"formTextArea\" rows={3}></textarea>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"formSelect\">Example select</label>\n                <select value={props.values.select} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"formSelect\">\n                    <option>1</option>\n                    <option>2</option>\n                    <option>3</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        </form>\n    );\n}\nconst initialFormValues: IFormValues = {\n    input: '',\n    checkbox: false,\n    radio: '',\n    textarea: '',\n    select: '',\n};\n\n\n\nconst PageForm = () => {\n    const [formValues, setFormValues] = useState(initialFormValues);\n\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\n        // todo: update form value\n        console.log(target);\n\n        if (target.id === 'formInputText') {\n            setFormValues({ ...formValues, input: target.value });\n            return;\n        }\n        if (target.id === 'formInputCheckBox') {\n            setFormValues({ ...formValues, checkbox: (target as HTMLInputElement).checked });\n            return;\n        }\n        if (target.id === 'formInputRadio1') {\n            setFormValues({ ...formValues, radio: (target as HTMLInputElement).value });\n            return;\n        }\n        if (target.id === 'formInputRadio2') {\n            setFormValues({ ...formValues, radio: (target as HTMLInputElement).value });\n            return;\n        }\n        if (target.id === 'formTextArea') {\n            setFormValues({ ...formValues, textarea: target.value });\n            return;\n        }\n        if (target.id === 'formSelect') {\n            setFormValues({ ...formValues, select: target.value });\n            return;\n        }\n    }\n\n\n    return <FormView values={formValues} handleChange={handleChange} />\n};\n\nexport default PageForm;","import React, { useState } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nimport TodoCategoryIndex from './containers/todo-categories/TodoCategoryIndex';\nimport TodoCategoryDetails from './containers/todo-categories/TodoCategoryDetails';\nimport TodoCategoryEdit from './containers/todo-categories/TodoCategoryEdit';\nimport TodoCategoryCreate from './containers/todo-categories/TodoCategoryCreate';\n\nimport TodoPriorityIndex from './containers/todo-priorities/TodoPriorityIndex';\nimport TodoPriorityDetails from './containers/todo-priorities/TodoPriorityDetails';\nimport TodoPriorityEdit from './containers/todo-priorities/TodoPriorityEdit';\nimport TodoPriorityCreate from './containers/todo-priorities/TodoPriorityCreate';\n\nimport TodoTaskIndex from './containers/todo-tasks/TodoTaskIndex';\nimport TodoTaskDetails from './containers/todo-tasks/TodoTaskDetails';\nimport TodoTaskEdit from './containers/todo-tasks/TodoTaskEdit';\nimport TodoTaskCreate from './containers/todo-tasks/TodoTaskCreate';\n\nimport HomeIndex from './containers/home/HomeIndex';\nimport Login from './containers/identity/Login';\nimport Register from './containers/identity/Register';\nimport Page404 from './containers/Page404';\nimport PageForm from './containers/PageForm';\nimport { AppContextProvider, initialAppState } from './context/AppContext';\n\nfunction App() {\n    const setAuthInfo = (jwt: string | null, firstName: string, lastName: string): void => {\n        setAppState({ ...appState, jwt, firstName, lastName });\n    }\n\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo });\n\n    return (\n        <BrowserRouter>\n            <>\n                <AppContextProvider value={appState} >\n                    <Header />\n                    <div className=\"container\">\n                        <main role=\"main\" className=\"pb-3\">\n\n                            <Switch>\n                                <Route exact path=\"/\" component={HomeIndex} />\n\n                                <Route path=\"/form\" component={PageForm} />\n\n                                <Route path=\"/identity/login\" component={Login} />\n                                <Route path=\"/identity/register\" component={Register} />\n\n                                <Route path=\"/todocategories/create\" component={TodoCategoryCreate} />\n                                <Route path=\"/todocategories/edit/:id\" component={TodoCategoryEdit} />\n                                <Route path=\"/todocategories/:id\" component={TodoCategoryDetails} />\n                                <Route path=\"/todocategories\" component={TodoCategoryIndex} />\n\n                                <Route path=\"/todopriorities/create\" component={TodoPriorityCreate} />\n                                <Route path=\"/todopriorities/edit/:id\" component={TodoPriorityEdit} />\n                                <Route path=\"/todopriorities/:id\" component={TodoPriorityDetails} />\n                                <Route path=\"/todopriorities\" component={TodoPriorityIndex} />\n\n                                <Route path=\"/todotasks/create\" component={TodoTaskCreate} />\n                                <Route path=\"/todotasks/edit/:id\" component={TodoTaskEdit} />\n                                <Route path=\"/todotasks/:id\" component={TodoTaskDetails} />\n                                <Route path=\"/todotasks\" component={TodoTaskIndex} />\n\n                                <Route component={Page404} />\n                            </Switch>\n                        </main>\n                    </div>\n                    <Footer />\n                </AppContextProvider>\n            </>\n        </BrowserRouter>\n    );\n}\n\n\nexport default App;\n","import 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport './assets/site.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Router>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}